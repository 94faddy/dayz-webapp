import { getHeader } from 'h3'
import { loginUser } from '~/utils/auth.js'
import { sessionStore } from '~/utils/session-store.js'

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)
    const { email, password } = body
    
    // Get client IP and MAC address
    const ip = getHeader(event, 'x-forwarded-for') || 
               getHeader(event, 'x-real-ip') || 
               getHeader(event, 'cf-connecting-ip') || 
               event.node?.req?.connection?.remoteAddress ||
               event.node?.req?.socket?.remoteAddress ||
               '127.0.0.1'
    const macAddress = getHeader(event, 'x-mac-address') || null
    
    // Validation
    if (!email || !password) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Email and password are required'
      })
    }
    
    let loginResult
    
    try {
      // Login user - ‡πÉ‡∏ä‡πâ try-catch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏à‡∏≤‡∏Å loginUser
      loginResult = await loginUser(email, password, ip, macAddress)
    } catch (loginError) {
      console.error('üîê Login error for:', email, '-', loginError.message)
      
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error messages ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á response ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
      if (loginError.message.includes('Invalid email or password')) {
        throw createError({
          statusCode: 401,
          statusMessage: 'Invalid email or password'
        })
      }
      
      // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      throw createError({
        statusCode: 401,
        statusMessage: loginError.message || 'Login failed'
      })
    }
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å loginUser
    if (!loginResult || !loginResult.status) {
      console.error('‚ùå Invalid login result structure')
      throw createError({
        statusCode: 500,
        statusMessage: 'Login processing error'
      })
    }
    
    // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ banned user - ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ createError ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Frontend catch ‡πÑ‡∏î‡πâ
    if (loginResult.status === 'banned') {
      console.log('üö´ User access restricted:', email, '-', loginResult.banReason)
      throw createError({
        statusCode: 403,
        statusMessage: loginResult.message,
        data: {
          status: 'banned',
          banReason: loginResult.banReason,
          user: loginResult.user
        }
      })
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    if (loginResult.status === 'pending_approval') {
      console.log('‚è≥ User pending approval:', email)
      return {
        success: false,
        status: 'pending_approval',
        message: loginResult.message,
        user: loginResult.user
      }
    }
    
    // ‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user object ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const user = loginResult.user
    
    if (!user || !user.id) {
      console.error('‚ùå Missing user data in login result')
      throw createError({
        statusCode: 500,
        statusMessage: 'User data processing error'
      })
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á session - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ user data ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    try {
      const sessionConfig = {
        maxAge: 24 * 60 * 60, // 24 hours
        password: process.env.SESSION_SECRET || 'my-super-secret-session-password-32-chars-minimum!',
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        name: 'dayz-session'
      }
      
      const session = await useSession(event, sessionConfig)
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á session data
      const sessionData = {
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          steamid64: user.steamid64,
          points: user.points || 0
        },
        isAdmin: false,
        loginTime: new Date().toISOString(),
        ip: ip,
        userAgent: getHeader(event, 'user-agent') || 'Unknown',
        createdAt: new Date().toISOString(),
        lastAccess: new Date().toISOString()
      }
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session data
      await session.update(sessionData)
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡∏•‡∏á database
      const sessionId = session.id || sessionStore.generateSessionId()
      const sessionSaved = await sessionStore.saveSession(
        sessionId, 
        sessionData, 
        sessionConfig.maxAge
      )
      
      if (!sessionSaved) {
        console.warn('‚ö†Ô∏è Session saved to memory but failed to save to database')
      }
      
      console.log('‚úÖ Session created successfully for user:', user.email)
      
    } catch (sessionError) {
      console.error('‚ùå Session creation failed:', sessionError)
      // ‡∏ñ‡πâ‡∏≤ session ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ login ‡∏ú‡πà‡∏≤‡∏ô
      throw createError({
        statusCode: 500,
        statusMessage: 'Session creation failed. Please try again.'
      })
    }
    
    return {
      success: true,
      message: 'Login successful',
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        steamid64: user.steamid64,
        points: user.points || 0
      }
    }
    
  } catch (error) {
    if (error.statusCode) {
      throw error
    }
    
    console.error('‚ùå Login system error:', error)
    throw createError({
      statusCode: 500,
      statusMessage: error.message || 'Login system error'
    })
  }
})