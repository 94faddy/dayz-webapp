export default defineNuxtRouteMiddleware(async (to, from) => {
  // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ù‡∏±‡πà‡∏á client
  if (process.server) return
  
  const user = useState('auth.user')
  const sessionLoaded = useState('auth.sessionLoaded')
  
  console.log('üîç Auth middleware: Current state:', {
    user: !!user.value,
    sessionLoaded: sessionLoaded.value,
    path: to.path
  })
  
  // ‡∏ñ‡πâ‡∏≤ session ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
  if (!sessionLoaded.value) {
    console.log('‚è≥ Auth middleware: Waiting for session restore...')
    
    // ‡∏£‡∏≠ session restore ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ timeout
    let attempts = 0
    const maxAttempts = 50 // ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    while (!sessionLoaded.value && attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 100))
      attempts++
      
      // Log progress ‡∏ó‡∏∏‡∏Å 10 attempts
      if (attempts % 10 === 0) {
        console.log(`‚è≥ Still waiting... (${attempts}/${maxAttempts})`)
      }
    }
    
    console.log(`‚úÖ Session wait completed after ${attempts * 100}ms. Loaded: ${sessionLoaded.value}, User: ${!!user.value}`)
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
  if (!user.value) {
    console.log('‚ùå No user found, redirecting to login')
    return navigateTo('/login?redirect=' + encodeURIComponent(to.path))
  }
  
  console.log('‚úÖ Auth middleware passed for user:', user.value.email)
})